package proyectotransversal.vistas;

import java.util.List;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;
import proyectotransversal.Entidades.Alumno;
import proyectotransversal.Entidades.Inscripcion;
import proyectotransversal.Entidades.Materia;
import proyectotransversal.accesoADatos.AlumnoData;
import proyectotransversal.accesoADatos.InscripcionData;
import proyectotransversal.accesoADatos.MateriaData;

public class Inscripciones extends javax.swing.JInternalFrame {

    private DefaultTableModel modelo = new DefaultTableModel() {

        public boolean isCellEditable(int f, int c) {

            return false;
        }

    };

    public Inscripciones() {
        initComponents();
        armarCabecera();
        cargarAlumnos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jCBSeleccioneAlumno = new javax.swing.JComboBox<>();
        jRBMateriasIns = new javax.swing.JRadioButton();
        jRBMateriasNo = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTMaterias = new javax.swing.JTable();
        jBInscribir = new javax.swing.JButton();
        jBAnular = new javax.swing.JButton();
        jBSalir = new javax.swing.JButton();

        setTitle("Formulario de Inscripcion");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel1.setText("Formulario de Inscripcion");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel2.setText("Seleccione un Alumno");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel3.setText("Listado de Materias");

        jCBSeleccioneAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBSeleccioneAlumnoActionPerformed(evt);
            }
        });

        jRBMateriasIns.setText("Materias Inscriptas");
        jRBMateriasIns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBMateriasInsActionPerformed(evt);
            }
        });

        jRBMateriasNo.setText("Materias No Inscriptas");
        jRBMateriasNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBMateriasNoActionPerformed(evt);
            }
        });

        jTMaterias.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTMaterias);

        jBInscribir.setText("Inscribir");
        jBInscribir.setEnabled(false);
        jBInscribir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBInscribirActionPerformed(evt);
            }
        });

        jBAnular.setText("Anular Inscripcion");
        jBAnular.setEnabled(false);
        jBAnular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAnularActionPerformed(evt);
            }
        });

        jBSalir.setText("Salir");
        jBSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(228, 228, 228)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(202, 202, 202)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jBInscribir)
                                .addGap(155, 155, 155)
                                .addComponent(jBAnular)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBSalir))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(27, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jRBMateriasIns))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRBMateriasNo, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jCBSeleccioneAlumno, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jCBSeleccioneAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53)
                .addComponent(jLabel3)
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jRBMateriasIns)
                    .addComponent(jRBMateriasNo))
                .addGap(73, 73, 73)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBInscribir)
                    .addComponent(jBAnular)
                    .addComponent(jBSalir))
                .addGap(43, 43, 43))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jRBMateriasInsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBMateriasInsActionPerformed
        //deseleccion el radiobutton mat. no inscriptas
        jRBMateriasNo.setSelected(false);
        //Habilita el boton anular y deshabilita el boton iscribir
        jBAnular.setEnabled(true);
        jBInscribir.setEnabled(false);

        borrarTabla();
        Alumno aluSelec = (Alumno) jCBSeleccioneAlumno.getSelectedItem();
        cargarDatos(aluSelec);
    }//GEN-LAST:event_jRBMateriasInsActionPerformed

    private void jCBSeleccioneAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBSeleccioneAlumnoActionPerformed

        borrarTabla();
        Alumno aluSelec = (Alumno) jCBSeleccioneAlumno.getSelectedItem();
        cargarDatos(aluSelec);
    }//GEN-LAST:event_jCBSeleccioneAlumnoActionPerformed

    private void jRBMateriasNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBMateriasNoActionPerformed
        //deseleccion el radiobutton mat. inscriptas
        jRBMateriasIns.setSelected(false);
        //Habilita el boton inscribir y deshabilita el boton anular inscripcion
        jBInscribir.setEnabled(true);
        jBAnular.setEnabled(false);
        borrarTabla();
        Alumno aluSelec = (Alumno) jCBSeleccioneAlumno.getSelectedItem();
        cargarDatos(aluSelec);

    }//GEN-LAST:event_jRBMateriasNoActionPerformed

    private void jBSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSalirActionPerformed
       
// Cierra y deshabilita el internal frame
        this.dispose();
        
        
    }//GEN-LAST:event_jBSalirActionPerformed

    private void jBInscribirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBInscribirActionPerformed
       
        Inscripcion inscN= new Inscripcion();
        //crear variable
        inscN.setAlumno((Alumno)jCBSeleccioneAlumno.getSelectedItem());
        int filaSeleccionada=jTMaterias.getSelectedRow();
        int id = (int)(jTMaterias.getValueAt(filaSeleccionada, 0));
        MateriaData mat=new MateriaData ();
        inscN.setMateria(mat.buscarMateria(id));
        inscN.setNota(0);
        InscripcionData insc = new InscripcionData();
        insc.guardarInscripcion(inscN);
        cargarDatos((Alumno)jCBSeleccioneAlumno.getSelectedItem());
        
    }//GEN-LAST:event_jBInscribirActionPerformed

    private void jBAnularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAnularActionPerformed

        int filaSeleccionada=jTMaterias.getSelectedRow();
        int idMateria = (int)(jTMaterias.getValueAt(filaSeleccionada, 0));
        
        Alumno alum= (Alumno)jCBSeleccioneAlumno.getSelectedItem();
        
        InscripcionData insc = new InscripcionData();
        insc.borrarInscripcionMateriaAlumno(alum.getIdAlumno(), idMateria);
        cargarDatos(alum);


    }//GEN-LAST:event_jBAnularActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAnular;
    private javax.swing.JButton jBInscribir;
    private javax.swing.JButton jBSalir;
    private javax.swing.JComboBox<Alumno> jCBSeleccioneAlumno;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JRadioButton jRBMateriasIns;
    private javax.swing.JRadioButton jRBMateriasNo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTMaterias;
    // End of variables declaration//GEN-END:variables

    private void armarCabecera() {

        modelo.addColumn("ID");
        modelo.addColumn("NOMBRE");
        modelo.addColumn("AÑO");
        jTMaterias.setModel(modelo);

    }

    private void cargarAlumnos() {

        AlumnoData alum = new AlumnoData();

        for (Alumno alu : alum.listarAlumno()) {
            jCBSeleccioneAlumno.addItem(alu);
        }

    }

    private void cargarDatos(Alumno alumno) {

        InscripcionData insc = new InscripcionData();

        List<Materia> obtenerMateriasNoCursadas = insc.obtenerMateriasNoCursadas(alumno.getIdAlumno());
        List<Materia> obtenerMateriasCursadas = insc.obtenerMateriasCursadas(alumno.getIdAlumno());
        
        if (jRBMateriasNo.isSelected()) {
            for (Materia materia : obtenerMateriasNoCursadas) {

                modelo.addRow(new Object[]{materia.getIdMateria(), materia.getNombre(), materia.getAnoMateria()});

            }

        } else if (jRBMateriasIns.isSelected()) {
            for (Materia materia : obtenerMateriasCursadas) {

                modelo.addRow(new Object[]{materia.getIdMateria(), materia.getNombre(), materia.getAnoMateria()});

            }
        }
        
   
        
        
    }

    private void borrarTabla() {

        //Contamos las filas de la tabla, restamos 1 porque el indice comienza en 0.
        int filas = jTMaterias.getRowCount() - 1;

        //Borramos de forma descendente para no alterar el indice
        for (; filas >= 0; filas--) {
            modelo.removeRow(filas);
        }

    }

}
